#!/bin/sh

if [[ $1 == -d ]]; then
    url=$2 && title=$3
    touch $temp/video_info

    [[ -d "$HOME/sh/app/bilibili info" ]] && bvi_type=app || bvi_type=dev

    if [[ "$url" == https://www.bilibili.com/* ]]; then
        bvi "$url"
        cp $HOME/sh/$bvi_type/"bilibili info"/bv_info.txt $temp/video_info
        load_platform=bilibili && load_code=$load_code_bilibili_audio
    elif [[ "$url" == https://www.youtube.com/* ]]; then
        yt-dlp -j "$url" | jq -r '
        "bv_title=" + .title,
        "bv_up=" + .uploader,
        "bv_uid=" + (.uploader_id // "N/A"),
        "bv_playback=" + (.view_count | tostring),
        "bv_likes=" + (.like_count | tostring),
        "bv_release=" + (
            .upload_date 
            | capture("(?<y>....)(?<m>..)(?<d>..)") 
            | "\(.y)-\(.m)-\(.d)T00:00:00Z"
        )
        ' > $temp/video_info
        load_platform=youtube && load_code=$load_code_youtube_audio
    fi
    echo url="$url" >> $temp/video_info
    echo platform=$load_platform >> $temp/video_info

    [[ -z $path_config ]] && ./bin/mapper
    cd $temp
    source e2s video_config

    if [[ "$medium" == "video" ]]; then
        medium_type=.mp4
        load_code_video="load_code_${load_platform}_video" && load_code=$load_code+${!load_code_video}
    else
        download_type=.m4a && medium_type=.m4a
    fi

    yt-dlp -o "input$download_type" "$url" -f "$load_code"

    [[ "$medium" == "video" ]] && download_type=$medium_type
    [[ ! -e "input$download_type" ]] && exit
    
    if [[ -z "$volume" || "$volume" == "1.0" ]]; then     
        mv input$download_type output$medium_type
    else
        if [[ "$medium" == "video" ]]; then
            ffmpeg -i input$download_type -af "volume=$volume" -c:v copy output$medium_type   
        else
            ffmpeg -i input$download_type -vn -c:a aac -b:a 192k -filter:a "volume=$volume" output$medium_type 
        fi
        [[ ! $? -eq 0 ]] && rm ./output$medium_type
    fi

    [[ ! -e "./output$medium_type" ]] && exit

    [[ -n "$output_path_" ]] && output_path=$output_path_
    mkdir -p $output_path
    source e2s video_info bv_title
    mv ./output$medium_type "$output_path/$bv_title$medium_type"

elif [[ $1 == -u ]]; then
    url="$2" && title="$3" && auto_define_title_name="$3"
    [[ ! -e "$url" ]] && exit
    mv "$url" ./$temp/output.m4a

    source e2s ./$temp/video_info
    source e2s ./$temp/video_config
    
    if [ -e "$artwork" ]; then
        ffmpeg -i ./$temp/output.m4a -map 0:a -c copy ./$temp/output_clean.m4a
        mv ./$temp/output_clean.m4a ./$temp/output.m4a
        [[ ! $? -eq 0 ]] && rm ./$temp/output.m4a
    fi

    [[ ! -e "./$temp/output.m4a" ]] && exit
    
    if [ -z "$title" ]; then
        if [[ -n "$bv_title" ]]; then
            title="$bv_title"
        else
            filename=$(basename "$url") && title="${filename%.*}"
        fi
    fi
    
    [[ -z $name ]] && name="@title"
    IFS=',' read -ra video_name_allowed <<< "$video_name_allowed"
    IFS='@' read -ra name_parts <<< "${name:1}"

    if [[ -z $auto_define_title_name ]]; then
        for i in "${!name_parts[@]}"; do
            found_in_allowed=false && name_part=${name_parts[$i]}
            for item in "${video_name_allowed[@]}"; do
                [[ "$name_part" == $item* ]] && found_in_allowed=true && break
            done
            [[ $found_in_allowed != "true" ]] && echo "name part $name_part donot exist in video_name_allowed" && exit;

            if [[ $item == "date" ]]; then
                item_=${bv_release:0:10}
            elif [[ $item == "title" ]]; then
                item_=$title
            elif [[ $item == "custom" ]]; then
                item_=$($temp/custom_command.sh "$title")
            fi

            auto_define_title_name=$auto_define_title_name$item_${name_part#"$item"}
        done
    fi

    AtomicParsley ./$temp/output.m4a --artist "$artist" --album "$album" --composer "$composer" --title "$auto_define_title_name" --year "$year" --genre "$genre" --artwork $artwork --overWrite

    if [[ $auto_compress == true ]]; then
        mv ./$temp/output.m4a ./$temp/output_compressing.m4a
        mcp -$compress_param $HOME/sh/app/youtube2music/$temp/output_compressing.m4a $HOME/sh/app/youtube2music/$temp/output.m4a
        [[ ! -e "./$temp/output.m4a" ]] && exit
    fi

    osascript -e "tell application \"Music\" to add POSIX file \"${HOME}/sh/app/youtube2music/$temp/output.m4a\""
    
elif [[ $1 == -a ]]; then
    config_name=$2 && cd ./resources
    [[ $3 != -custom ]] && config_name_new=$3
    [[ ! -e "./video_configs/$config_name" ]] && cp ./static/video_config_template ./video_configs/$config_name
    
    if [ ! -z "$config_name_new" ]; then
        mv ./video_configs/$config_name ./video_configs/$config_name_new
    else
        if [[ $3 == -custom ]]; then
            base=$(basename "$4") && ext=".${base#*.}"
            cp "$4" ./custom/$config_name$ext
        else
            op "./video_configs/$config_name" "$video_config_app"
        fi
    fi 
elif [[ $1 == -l ]]; then
    ls resources/video_configs
elif [[ $1 == -* ]]; then
    echo "option false"
else
    export output_path_=$HOME/sh/app/youtube2music/$temp/media
    ./app -d $1

    filename=$(find "$output_path_/" -maxdepth 1 -type f ! -name ".*" -exec basename {} \; | head -n 1)
    ./app -u "$output_path_/$filename" $2
fi
