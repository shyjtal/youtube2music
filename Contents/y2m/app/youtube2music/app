#!/bin/sh

while IFS='=' read -r key value; do
if [[ -n "$key" && ! "$key" =~ ^# ]]; then
    export "$key"="$value"
fi
done < ./$temp/video_config

if [ -n "$output_path_" ]; then
    output_path=$output_path_
fi

video_name_network=output

if [[ "$medium" == "video" ]]; then
    load_type="137+140"
    medium_type=.mp4
else
    load_type="140"
    download_type=.m4a
    medium_type=.m4a
fi

if [[ -d "$HOME/sh/app/bilibili info" ]]; then
    bvi_type=app
else
    bvi_type=dev
fi

if [[ $1 == -d ]]; then
    url=$2
    title=$3
    cd $temp

    touch video_title.txt
    touch video_info.txt

    if [[ "$url" == https://www.bilibili.com/* ]]; then
        $HOME/sh/bvi "$url"
        cp $HOME/sh/$bvi_type/"bilibili info"/bv_info.txt video_info.txt
        if [[ "$medium" == "video" ]]; then
            load_type="30064+30232"
        else
            load_type="30232"
        fi   
    elif [[ "$url" == https://www.youtube.com/* ]]; then
        yt-dlp -j "$url" | jq -r '
        "bv_title=" + .title,
        "bv_up=" + .uploader,
        "bv_uid=" + (.uploader_id // "N/A"),
        "bv_playback=" + (.view_count | tostring),
        "bv_likes=" + (.like_count | tostring),
        "bv_release=" + (
            .upload_date 
            | capture("(?<y>....)(?<m>..)(?<d>..)") 
            | "\(.y)-\(.m)-\(.d)T00:00:00Z"
        )
        ' > video_info.txt
    fi

    while IFS='=' read -r key value; do
    if [[ -n "$key" && ! "$key" =~ ^# ]]; then
        export "$key"="$value"
    fi
    done < video_info.txt

    echo "$bv_title" > video_title.txt

    yt-dlp -o "input$download_type" "$url" -f "$load_type"

    if [[ "$medium" == "video" ]]; then
        download_type=$medium_type
    fi

    [[ ! -e "input$download_type" ]] && exit
    
    if [[ -z "$volume" || "$volume" == "1.0" ]]; then     
        mv input$download_type output$medium_type
    else
        if [[ "$medium" == "video" ]]; then
            ffmpeg -i input$download_type -af "volume=$volume" -c:v copy output$medium_type   
        else
            ffmpeg -i input$download_type -vn -c:a aac -b:a 192k -filter:a "volume=$volume" output$medium_type 
        fi

        if [ ! $? -eq 0 ]; then
            rm ./output$medium_type
        fi
    fi

    [[ ! -e "./output$medium_type" ]] && exit

    mv ./output$medium_type "$output_path/$bv_title$medium_type"
    cd ../

elif [[ $1 == -u ]]; then
    url="$2"
    title="$3"
    auto_define_title_name="$3"

    [[ ! -e "$url" ]] && exit
    mv "$url" ./$temp/output.m4a

    while IFS='=' read -r key value; do
    if [[ -n "$key" && ! "$key" =~ ^# ]]; then
        export "$key"="$value"
    fi
    done < ./$temp/video_info.txt

    ./bin/mapper $bv_up

        while IFS='=' read -r key value; do
    if [[ -n "$key" && ! "$key" =~ ^# ]]; then
        export "$key"="$value"
    fi
    done < ./$temp/video_config
    
    if [ -e "$artwork" ]; then
        ffmpeg -i ./$temp/output.m4a -map 0:a -c copy ./$temp/output_clean.m4a
        mv ./$temp/output_clean.m4a ./$temp/output.m4a
        [[ ! $? -eq 0 ]] && rm ./$temp/output.m4a
    fi

    [[ ! -e "./$temp/output.m4a" ]] && exit
    
    if [ -z "$title" ]; then
        if [[ ! -z "$bv_title" ]]; then
            title="$bv_title"
        else
            filename=$(basename "$url")
            title="${filename%.*}"
        fi
    fi
    
    if [[ -z $name ]]; then
        name="@title"
    fi
    
    IFS=',' read -ra video_name_allowed <<< "$video_name_allowed"
    IFS='@' read -ra name_parts <<< "${name:1}"

    if [[ -z $auto_define_title_name ]]; then
        for i in "${!name_parts[@]}"; do
            found_in_allowed=false
            name_part=${name_parts[$i]}

            for item in "${video_name_allowed[@]}"; do
                if [[ "$name_part" == $item* ]]; then
                    found_in_allowed=true
                    break
                fi
            done

            if [[ $found_in_allowed == "true" ]]; then
                if [[ $item == "date" ]]; then
                    item_=${bv_release:0:10}
                elif [[ $item == "title" ]]; then
                    item_=$title
                elif [[ $item == "custom" ]]; then
                    item_=$($temp/custom_command.sh "$title")
                fi
                new_title=$new_title$item_${name_part#"$item"}
            else
                echo "name part $name_part donot exist in video_name_allowed"
                exit;
            fi
        done
        auto_define_title_name=$new_title
    fi

    AtomicParsley ./$temp/output.m4a --artist "$artist" --album "$album" --composer "$composer" --title "$auto_define_title_name" --year "$year" --genre "$genre" --artwork $artwork --overWrite

    if [[ $auto_compress == true ]]; then
        mv ./$temp/output.m4a ./$temp/output_compressing.m4a
        $HOME/sh/mcp $compress_param $HOME/sh/app/youtube2music/$temp/output_compressing.m4a $HOME/sh/app/youtube2music/$temp/output.m4a
        [[ ! -e "./$temp/output.m4a" ]] && exit
    fi

    osascript -e "tell application \"Music\" to add POSIX file \"${HOME}/sh/app/youtube2music/$temp/output.m4a\""
    
elif [[ $1 == -a ]]; then
    config_name=$2
    if [[ $3 != -custom ]]; then
        config_name_new=$3
    fi
    
    if [ ! -e "./resources/video_configs/$config_name" ]; then
        cp ./resources/static/video_config_template ./resources/video_configs/$config_name
    fi
    
    if [ ! -z "$config_name_new" ]; then
        mv ./resources/video_configs/$config_name ./resources/video_configs/$config_name_new
    else
        if [[ $3 == -custom ]]; then
            base=$(basename "$4")
            ext=".${base#*.}"
            cp "$4" ./resources/custom/$config_name$ext
        else
            $HOME/sh/tools/open_file "./resources/video_configs/$config_name" "$video_config_app"
        fi
    fi 
elif [[ $1 == -l ]]; then
    ls resources/video_configs
elif [[ $1 == -* ]]; then
    echo "option false"
else
    export output_path_=$HOME/sh/app/youtube2music/$temp
    ./app -d $1
    
    video_name=$2
    video_name_network="$(cat $temp/video_title.txt)"

    ./app -u "$HOME/sh/app/youtube2music/$temp/$video_name_network$medium_type" $video_name
fi
